# AWS DevOps Batch 4 - GitHub Actions CI/CD Pipeline
# Complete workflow for building, testing, and deploying to AWS

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: aws-devops-batch4
  ECS_CLUSTER: aws-devops-batch4-dev
  ECS_SERVICE: aws-devops-batch4-dev-service
  ECS_TASK_DEFINITION: aws-devops-batch4-dev

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run security audit
        run: npm audit --audit-level moderate
        
      - name: Run unit tests
        run: npm test
        
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          
      - name: Generate test coverage
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
      - name: SonarQube Analysis
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=aws-devops-batch4
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  # Build and Test Docker Image
  build:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Development Environment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'dev'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          
      - name: Terraform Init
        run: |
          cd templates/terraform
          terraform init \
            -backend-config="bucket=aws-devops-batch4-terraform-state" \
            -backend-config="key=dev/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
            
      - name: Terraform Plan
        run: |
          cd templates/terraform
          terraform plan \
            -var="environment=dev" \
            -var="app_count=2" \
            -out=tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD_DEV }}
          
      - name: Terraform Apply
        run: |
          cd templates/terraform
          terraform apply tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD_DEV }}
          
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster aws-devops-batch4-dev \
            --service aws-devops-batch4-dev-service \
            --force-new-deployment
            
      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster aws-devops-batch4-dev \
            --services aws-devops-batch4-dev-service
            
      - name: Run smoke tests
        run: |
          # Wait for application to be ready
          sleep 30
          
          # Test health endpoint
          curl -f http://dev.aws-devops-batch4.com/health || exit 1
          
      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#devops-alerts'
          text: '✅ Development deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          
      - name: Terraform Init
        run: |
          cd templates/terraform
          terraform init \
            -backend-config="bucket=aws-devops-batch4-terraform-state" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
            
      - name: Terraform Plan
        run: |
          cd templates/terraform
          terraform plan \
            -var="environment=staging" \
            -var="app_count=3" \
            -out=tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD_STAGING }}
          
      - name: Terraform Apply
        run: |
          cd templates/terraform
          terraform apply tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD_STAGING }}
          
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster aws-devops-batch4-staging \
            --service aws-devops-batch4-staging-service \
            --force-new-deployment
            
      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster aws-devops-batch4-staging \
            --services aws-devops-batch4-staging-service
            
      - name: Run integration tests against staging
        run: |
          # Wait for application to be ready
          sleep 60
          
          # Run integration tests
          npm run test:staging
        env:
          STAGING_URL: https://staging.aws-devops-batch4.com
          
      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#devops-alerts'
          text: '✅ Staging deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production Environment
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          
      - name: Terraform Init
        run: |
          cd templates/terraform
          terraform init \
            -backend-config="bucket=aws-devops-batch4-terraform-state" \
            -backend-config="key=prod/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
            
      - name: Terraform Plan
        run: |
          cd templates/terraform
          terraform plan \
            -var="environment=prod" \
            -var="app_count=4" \
            -out=tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD_PROD }}
          
      - name: Terraform Apply
        run: |
          cd templates/terraform
          terraform apply tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD_PROD }}
          
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster aws-devops-batch4-prod \
            --service aws-devops-batch4-prod-service \
            --force-new-deployment
            
      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster aws-devops-batch4-prod \
            --services aws-devops-batch4-prod-service
            
      - name: Run production health checks
        run: |
          # Wait for application to be ready
          sleep 120
          
          # Test health endpoint
          curl -f https://aws-devops-batch4.com/health || exit 1
          
          # Test critical endpoints
          curl -f https://aws-devops-batch4.com/api/health || exit 1
          
      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#devops-alerts'
          text: '🚀 Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run performance tests
        run: npm run test:performance
        env:
          TEST_URL: https://staging.aws-devops-batch4.com
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'https://staging.aws-devops-batch4.com'
          
      - name: Run dependency vulnerability scan
        run: |
          npm audit --audit-level high
          
      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: 'sarif'
          output: 'container-scan-results.sarif'
          
      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'container-scan-results.sarif'

  # Monitoring and Alerting
  monitoring:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup CloudWatch alarms
        run: |
          # Create CloudWatch alarms for each environment
          for env in dev staging prod; do
            aws cloudwatch put-metric-alarm \
              --alarm-name "HighCPU-$env" \
              --alarm-description "High CPU utilization in $env environment" \
              --metric-name CPUUtilization \
              --namespace AWS/ECS \
              --statistic Average \
              --period 300 \
              --threshold 80 \
              --comparison-operator GreaterThanThreshold \
              --evaluation-periods 2 \
              --alarm-actions arn:aws:sns:us-east-1:${{ secrets.AWS_ACCOUNT_ID }}:devops-alerts
          done
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  # Cleanup (for development environment)
  cleanup-dev:
    name: Cleanup Development
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Cleanup old ECR images
        run: |
          # Keep only the last 5 images
          aws ecr describe-images \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --query 'imageDetails[?imagePushedAt>`'$(date -d '7 days ago' -u +%Y-%m-%dT%H:%M:%S)'`].imageDigest' \
            --output text | xargs -I {} aws ecr batch-delete-image \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --image-ids imageDigest={}
